[
  {
    "title": "Module 39: More about JavaScript",
    "details": [
      {
        "type": "mcq",
        "options": [
          "The process of removing unused CSS from a web page",
          "The process of freeing up memory that is no longer being used by a program",
          "The process of optimizing code for faster execution",
          "The process of removing unused JavaScript code from a web page"
        ],

        "question": "What is garbage collection in JavaScript?",
        "correctIndex": 1
      },
      {
        "type": "mcq",
        "options": [
          "Synchronous code execution means that the code is executed without waiting for the previous line to complete, while asynchronous code execution means that the code is executed in sequential order.",
          "Synchronous code execution means that the code is executed in a sequential order, while asynchronous code execution means that the code is executed without waiting for the previous line to complete.",
          "Synchronous code execution means that the code is executed without any delays, while asynchronous code execution means that the code is delayed before execution.",
          "Synchronous code execution means that the code is executed in parallel, while asynchronous code execution means that the code is executed in a single thread."
        ],

        "question": "What is the difference between synchronous and asynchronous code execution in JavaScript?",
        "correctIndex": 1
      },
      {
        "type": "mcq",
        "options": [
          "A data structure that stores events and their handlers in a queue",
          "A JavaScript engine that executes code in a single thread",
          "A process that allows JavaScript to interact with the DOM",
          "A mechanism that allows asynchronous code to be executed in JavaScript"
        ],

        "question": "What is the event loop in JavaScript?",
        "correctIndex": 3
      },
      {
        "type": "mcq",
        "options": [
          "setTimeout executes a function once after a specified delay, while setInterval executes a function repeatedly at a specified interval.",
          "setTimeout executes a function repeatedly at a specified interval, while setInterval executes a function once after a specified delay.",
          "setTimeout and setInterval are interchangeable and have the same behavior in JavaScript.",
          "etTimeout and setInterval are used for completely different purposes in JavaScript and cannot be compared."
        ],

        "question": "What is the difference between setTimeout and setInterval in JavaScript?",
        "correctIndex": 0
      },
      {
        "type": "mcq",
        "options": [
          "Use the stop method to cancel the timer",
          "Use the pause method to pause the timer",
          "Use the clearTimeout or clearInterval method to cancel the timer",
          "There is no way to cancel a setTimeout or setInterval once it has been set"
        ],

        "question": "How do you cancel a setTimeout or setInterval in JavaScript?",
        "correctIndex": 2
      },
      {
        "type": "mcq",
        "options": [
          "An IOU for a sandwich from your co-worker who always forgets to bring lunch",
          "A guarantee that your JavaScript code will always work perfectly without any errors",
          "A way to make a solemn vow to never use var again in your code",
          "An object that represents a value that may not be available yet, but will be resolved or rejected in the future"
        ],

        "question": "What is a Promise in JavaScript?",
        "correctIndex": 3
      },
      {
        "type": "mcq",
        "options": [
          "Yes, you can use await anywhere in your code",
          "No, await can only be used inside an async function",
          "await can be used outside of an async function, but it will not work correctly",
          "It depends on the browser or JavaScript engine being used"
        ],

        "question": "Can you use await outside of an async function?",
        "correctIndex": 1
      },
      {
        "type": "mcq",
        "options": [
          "A loop that runs events in parallel on multiple threads",
          "A loop that runs events sequentially on a single thread",
          "A loop that waits for user input before executing events",
          "A loop that is used to synchronize multiple threads in a multi-threaded environment"
        ],

        "question": "What is the event loop in JavaScript?",
        "correctIndex": 1
      },
      {
        "type": "mcq",
        "options": [
          "Synchronous programming can only run on a single thread, while asynchronous programming can run on multiple threads.",
          "Synchronous programming executes code sequentially, while asynchronous programming does not.",
          "Synchronous programming is faster than asynchronous programming.",
          "Synchronous programming is easier to debug than asynchronous programming."
        ],

        "question": "What is the main difference between synchronous and asynchronous programming?",
        "correctIndex": 1
      },
      {
        "type": "mcq",
        "options": [
          "A syntax error caused by a misspelled variable name",
          "A reference error caused by an undefined variable",
          "An error thrown by a function that is not defined",
          "An error caused by trying to divide by zero"
        ],

        "question": "Which of the following is an example of a JavaScript runtime error?",
        "correctIndex": 3
      }
    ]
  },

  {
    "title": "Module 40: Common Error Types in JS",
    "details": [
      {
        "type": "mcq",
        "options": ["SyntaxError", "ReferenceError", "TypeError", "RangeError"],

        "question": "What type of error is commonly caused by referencing a variable or function that has not been defined?",
        "correctIndex": 1
      },
      {
        "type": "mcq",
        "options": ["SyntaxError", "ReferenceError", "TypeError", "RangeError"],

        "question": "What type of error is commonly caused by trying to perform an operation on a value that is not of the expected type?",
        "correctIndex": 2
      },
      {
        "type": "mcq",
        "options": ["SyntaxError", "ReferenceError", "TypeError", "RangeError"],

        "question": "What type of error is commonly caused by trying to access an array element that does not exist? (try to google it)",
        "correctIndex": 3
      },
      {
        "type": "mcq",
        "options": ["SyntaxError", "ReferenceError", "TypeError", "RangeError"],

        "question": "What type of error is commonly caused by trying to call a function that does not exist?",
        "correctIndex": 1
      },
      {
        "type": "mcq",
        "options": ["ReferenceError", "TypeError", "SyntaxError", "RangeError"],

        "question": "What type of error will the following code throw?<pre class=\"ql-syntax\" spellcheck=\"false\">const num = 10;\nnum();\n</pre>",
        "correctIndex": 1
      },
      {
        "type": "mcq",
        "options": ["SyntaxError", "TypeError", "ReferenceError", "RangeError"],

        "question": "What type of error will the following code snippet produce?<pre class=\"ql-syntax\" spellcheck=\"false\">let x = 10;\nx = y + 5;\nconsole.log(x);\n</pre>",
        "correctIndex": 2
      },
      {
        "type": "mcq",
        "options": [
          "RangeError",
          "TypeError",
          "ReferenceError",
          "None of the above"
        ],

        "question": "What type of error will the following code snippet produce?<pre class=\"ql-syntax\" spellcheck=\"false\">const obj = { name: 'John' };\nObject.keys(obj).forEach(prop =&gt; console.log(prop));\n</pre>",
        "correctIndex": 3
      },
      {
        "type": "mcq",
        "options": [
          "SyntaxError",
          "TypeError",
          "ReferenceError",
          "None of the above"
        ],

        "question": "What type of error will the following code snippet produce?<pre class=\"ql-syntax\" spellcheck=\"false\">const name = 'John';\nname.toUpperCase = () =&gt; 'JOHN';\nconsole.log(name.toUpperCase());\n</pre>",
        "correctIndex": 3
      },
      {
        "type": "mcq",
        "options": [
          "SyntaxError",
          "TypeError",
          "ReferenceError",
          "RangeError",
          "No error in the code snippet"
        ],

        "question": "What type of error will the following code snippet produce?<pre class=\"ql-syntax\" spellcheck=\"false\">const arr = [1, 2, 3];\narr.slice(-2, 0);\n</pre>",
        "correctIndex": 4
      },
      {
        "type": "mcq",
        "options": [
          "SyntaxError",
          "TypeError",
          "ReferenceError",
          "None of the above"
        ],

        "question": "What type of error will the following code snippet produce?<pre class=\"ql-syntax\" spellcheck=\"false\">const greeting = 'Hello, world!';\n</pre>",
        "correctIndex": 3
      }
    ]
  },
  {
    "title": "Module 41: Few More JavaScript Debug",
    "details": [
      {
        "type": "mcq",
        "options": [
          "addBtn.className = \"btn-primary\";",
          "addBtn.classList.add('btn-primary')",
          "addBtn.setAttribute(\"class\", \"btn-primary\");",
          "All of the above"
        ],

        "question": "How can you add a class name to addBtn?(Do some research on it)<pre class=\"ql-syntax\" spellcheck=\"false\">const addBtn = document.getElementById(\"add-btn\");\n</pre>",
        "correctIndex": 3
      },
      {
        "type": "mcq",
        "options": ["h1", "NaN", "undefined", "None of the above"],

        "question": "<pre class=\"ql-syntax\" spellcheck=\"false\">const sum = (p, q) =&gt; parseInt(p) + q;\nconst total = sum(\"h\", 1);\n</pre>The value of total will be?",
        "correctIndex": 1
      },
      {
        "type": "mcq",
        "options": ["true", "false", "-5", "60"],

        "question": "What is the output? <pre class=\"ql-syntax\" spellcheck=\"false\">const marks= 60;\nconst resubmit = -5; \nconsole.log(!(marks &gt; 0 || resubmit &gt; 0));\n</pre>",
        "correctIndex": 1
      },
      {
        "type": "mcq",
        "options": [
          "console.log(Object.length(person).keys);",
          "console.log(Object.keys.length);",
          "console.log(Object.keys(person).length);",
          "No way for finding it out"
        ],

        "question": "<pre class=\"ql-syntax\" spellcheck=\"false\">const person = {\n  name: \"hero\", \n  id: 101, \n  address: \"BD\",\n  postalCode: 40321\n};\n</pre>How will you find out the numbers of properties present in an object person?",
        "correctIndex": 2
      },
      {
        "type": "mcq",
        "options": ["true", "false", "0", "-1"],

        "question": "<pre class=\"ql-syntax\" spellcheck=\"false\">const animals = ['cat', 'dog', 'rat'];\nconsole.log(animals.includes('Cat'));\n</pre>What will be the output?",
        "correctIndex": 1
      },
      {
        "type": "mcq",
        "options": ["1", "-1", "20", "0"],

        "question": "<pre class=\"ql-syntax\" spellcheck=\"false\">const unique = array =&gt; array.indexOf(“21”);\nconst array = [2,3,4,5,2];\n</pre>If you call the unique function and pass the array what will you get?",
        "correctIndex": 1
      },
      {
        "type": "mcq",
        "options": ["5", "23", "32", "undefined"],

        "question": "<pre class=\"ql-syntax\" spellcheck=\"false\">const add =(para1 , para2) =&gt; para2 + para1\n</pre>What will be the return of add(“2”,3)?",
        "correctIndex": 2
      },
      {
        "type": "mcq",
        "options": [
          "assignment error",
          "Reference error",
          "logical error",
          "nothing"
        ],

        "question": "<pre class=\"ql-syntax\" spellcheck=\"false\">const b=6\nb=6\nconsole.log(b);\n</pre>If you run the above code, which type of error will you get?",
        "correctIndex": 0
      },
      {
        "type": "mcq",
        "options": [
          "a sequence of sentences that specifies a search pattern.",
          "a sequence of words that specifies a search pattern.",
          "a sequence of characters that specifies a search pattern.",
          "I wanna cry . I am getting mad"
        ],

        "question": "What is a regular expression ?",
        "correctIndex": 2
      },
      {
        "type": "mcq",
        "options": [
          "Uncaught Syntax Error",
          "‘black’",
          "Uncaught (in promise) TypeError",
          "Uncaught Reference error"
        ],

        "question": "What would be the output?&nbsp;<pre class=\"ql-syntax\" spellcheck=\"false\">const colors&nbsp;= {mango: 'green', grapes: 'black', organe: 'yellow'};\nconsole.log(colors[grapes])\n</pre>",
        "correctIndex": 3
      }
    ]
  },
  {
    "title": "Module 42: Everything about browsers",
    "details": [
      {
        "type": "mcq",
        "options": ["true", "false", "Don't know"],

        "question": "location===window.location is this true or false?",
        "correctIndex": 0
      },
      {
        "type": "mcq",
        "options": [
          "to take input from users",
          "to loop through an object",
          "To show an output",
          "all of the above"
        ],

        "question": "Why is prompt() used?",
        "correctIndex": 0
      },
      {
        "type": "mcq",
        "options": [
          "Beautiful Object Model",
          "Browser Objective Model",
          "Beast Object Modules",
          "Browser Object Model"
        ],

        "question": "Full form of BOM in Javascript is---",
        "correctIndex": 3
      },
      {
        "type": "mcq",
        "options": ["Sources", "Network", "Performance", "Application"],

        "question": "Which tab of the chrome browser will show you the cookies stored?",
        "correctIndex": 3
      },
      {
        "type": "mcq",
        "options": ["location.assign;", "location.move;", "location.reload;"],

        "question": "If you want to visit \"https://www.google.com/\" from your site on a button click, which one should you use?",
        "correctIndex": 0
      },
      {
        "type": "mcq",
        "options": [
          "cookies",
          "local storage",
          "session storage",
          "None of the above"
        ],

        "question": "Which storage information will not remain after you close the browser?",
        "correctIndex": 2
      },
      {
        "type": "mcq",
        "options": [
          "localStorage.storeItem()",
          "localStorage.getItem()",
          "localStorage.setItem()",
          "localStorage.saveItem()"
        ],

        "question": "Which method will you use to store items in local storage?",
        "correctIndex": 2
      },
      {
        "type": "mcq",
        "options": [
          "cookies are not sent to the server",
          "cookies are sent to the server",
          "Only Facebook is using cookies",
          "Browser Cookies are edible"
        ],

        "question": "Which one is true?",
        "correctIndex": 1
      },
      {
        "type": "mcq",
        "options": ["window.cookie", "window.cookieStore", "document.cookie"],

        "question": "Which one will return you all the cookies in a string?",
        "correctIndex": 2
      }
    ]
  },
  {
    "title": "Module 43: Dev Tool and Debug projects",
    "details": [
      {
        "type": "mcq",
        "options": ["Ctrl + L", "Ctrl + C", "Ctrl + D", "Ctrl + X"],

        "question": "The Keyboard Shortcut for clearing console in chrome dev tool is-",
        "correctIndex": 0
      },
      {
        "type": "mcq",
        "options": [
          "Secure Service Layer",
          "Secure Search Layer",
          "Secure Server Layer",
          "Secure Sockets Layer"
        ],

        "question": "What does SSL stand for? (Google it if needed)",
        "correctIndex": 3
      },
      {
        "type": "mcq",
        "options": [
          "$(\"#btn\")",
          "$(\"btn\")",
          "select(\"btn\")",
          "console.select(\"#btn\")"
        ],

        "question": "<pre class=\"ql-syntax\" spellcheck=\"false\">&lt;button id=\"btn\"&gt;Click&lt;/button&gt;\n</pre>The shortcut for selecting the button element in the chrome browser console is -",
        "correctIndex": 0
      },
      {
        "type": "mcq",
        "options": [
          "XML HTTP request",
          "XML Hypertext request",
          "X-HTML request",
          "X-ray Hiring Request"
        ],

        "question": "What does XHR stand for?",
        "correctIndex": 0
      },
      {
        "type": "mcq",
        "options": [
          "console.data",
          "console.table",
          "console.dir",
          "console.log"
        ],

        "question": "What console method will you call to see array data in a table?",
        "correctIndex": 1
      },
      {
        "type": "mcq",
        "options": [
          "DOM brakpoint",
          "Event listener breakpoint",
          "XHR breakpoint",
          "All of the above"
        ],

        "question": "Which of the following are chrome dev tool breakpoints?",
        "correctIndex": 3
      },
      {
        "type": "mcq",
        "options": ["An object", "A Function", "An Array", "A Method"],

        "question": "What is console ?&nbsp;",
        "correctIndex": 0
      },
      {
        "type": "mcq",
        "options": [
          "console.error()",
          "console.warn()",
          "console.warning()",
          "console.bug()"
        ],

        "question": "How to show a warning in console ?&nbsp;",
        "correctIndex": 1
      },
      {
        "type": "mcq",
        "options": [
          "Network Tab",
          "Source Tab",
          "Memory Tab",
          "Application Tab"
        ],

        "question": "Where we can see our code in dev tool?",
        "correctIndex": 1
      },
      {
        "type": "mcq",
        "options": [
          "Programming language",
          "Collection of web development tools integrated into Google chrome browser",
          "A code editor",
          "Explains the structure of a website."
        ],

        "question": "What is a chrome dev tool?",
        "correctIndex": 1
      }
    ]
  },
  {
    "title": "Module 44: JavaScript You need to know for React",
    "details": [
      {
        "type": "mcq",
        "options": [
          "Map returns an array but forEach returns null",
          "Map returns an array but forEach returns undefined",
          "Map returns an object but forEach returns an array",
          "Both return an array"
        ],

        "question": "Which one is true about map and forEach when called on an empty array?",
        "correctIndex": 1
      },
      {
        "type": "mcq",
        "options": ["if ( { } )", "If ( [] )", "If ( -77)", "If ( 0 )"],

        "question": "Which one is a falsy value here?",
        "correctIndex": 3
      },
      {
        "type": "mcq",
        "options": [
          "undefined",
          "{name: 'Hero', age: 34}",
          "Hero 34",
          "{ 'Hero', 34}"
        ],

        "question": "<pre class=\"ql-syntax\" spellcheck=\"false\">const name = 'Hero';const age = 34;\nconst person = {name, age}; console.log(person);\n</pre>What will be the output?(Try it out)",
        "correctIndex": 1
      },
      {
        "type": "mcq",
        "options": [
          "person.name",
          "person[\"name\"]",
          "person[name]",
          "All of above"
        ],

        "question": "<pre class=\"ql-syntax\" spellcheck=\"false\">const person = { name : ”Babe” }\n</pre>Which one is not the correct syntax for accessing the object property?&nbsp;&nbsp;",
        "correctIndex": 2
      },
      {
        "type": "mcq",
        "options": [
          "Destructuring of an object.",
          "Destructuring of an array.",
          "Destructuring in both array and object.",
          "None of the above."
        ],

        "question": "<pre class=\"ql-syntax\" spellcheck=\"false\">const {name, country, age} = person;\n</pre>What does the above code snippet indicate?",
        "correctIndex": 0
      },
      {
        "type": "mcq",
        "options": ["undefined", "Alice", "Lucy", "None of the above."],

        "question": "What is the value of ratName?<pre class=\"ql-syntax\" spellcheck=\"false\">const adventurer = { name: 'Alice',cat: {name: 'Lucy'} };\nconst ratName = adventurer?.rat?.name;\n</pre>",
        "correctIndex": 0
      },
      {
        "type": "mcq",
        "options": [
          "JSON.stringify()",
          "JSON.object()",
          "JSON.parse()",
          "JSON.purse()"
        ],

        "question": "Which method converts JSON strings to javascript objects?",
        "correctIndex": 2
      },
      {
        "type": "mcq",
        "options": ["Null", "null", "person is null", "person"],

        "question": "<pre class=\"ql-syntax\" spellcheck=\"false\">let person =null;\nconsole.log(person ? person : \"person is null\");\n</pre>What will be the output of the above code?",
        "correctIndex": 2
      },
      {
        "type": "mcq",
        "options": [
          "Returns a new array with the elements that pass the condition",
          "Returns an empty array if no elements pass the test",
          "Returns undefined when no elements pass the test",
          "it is an array method"
        ],

        "question": "Which one is not true for the filter (array method filter)?",
        "correctIndex": 2
      },
      {
        "type": "mcq",
        "options": ["true", "false", "‘true’", "‘false’"],

        "question": "<pre class=\"ql-syntax\" spellcheck=\"false\">const obj = {a:1};\nconsole.log(Object.keys(obj).length===0);\n</pre>What will be the output?",
        "correctIndex": 1
      }
    ]
  }
]
